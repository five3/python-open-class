import re# 定义正则表达式串。 r的作用: 反转义a = 'a\tb'print(a)b = r'a\tb'print(b)s = '123456'print(re.match(r'123'))print(re.search(r'123'))print(re.match(r'456'))print(re.search(r'456'))s = '123abc123'print(re.findall('123'))r = re.compile(r'^010-?[1-9]\d{7}$')print(r.findall('01045678941'))# sub()字符串正则替换，返回替换字符串print(re.sub(r'w\w+d', 'python', 'hello world hello world hello world!'))print(re.sub(r'w\w+d', 'python', 'hello world hello world hello world!', 2))# subn() 字符串正则替换，返回元组，元组包含替换后字符串和替换次数print(re.subn(r'w\w+d', 'python', 'hello world hello world hello world!'))# split() 根据正则表达式切割字符串，返回切割后的列表print(re.split(r'\s', 'hello world!'))# 正则语法# . * ? + ^ $ \ | [] {} 都称之为元字符，需要匹配查找元字符时，需要添加\进行转义r = r'huicewang\.'print(re.findall(r, 'http://www.huicewang.com'))# ^代表以什么开头r = r'^123'print(re.findall(r, '12334455677123'))# $代表以什么结尾r = r'123$'print(re.findall(r, '12345123'))# .代表任意字符r = r'1.2'print(re.findall(r, '123451321432'))# [0-9]代表任意数字r = r'a[0-9]b'print(re.findall(r, 'a9b,afb,a23b,ae3b'))# [a-z]任意小写字母，[A-Z]任意大写字母reg_str = r'[a-z][A-Z][0-9]'print(re.findall(reg_str, 'aQ1 rE5 ear e6 E7r'))# [^]不在区间范围内的值r = r'a[^0-9]b'print(re.findall(r, 'a9b,afb,a23b,ae3b'))# \d代表数字reg_str = r'1[\d]{10}'print(re.findall(reg_str, '13412345678,qwertyui'))# \D非数字reg_str = r'a\Dz'print(re.findall(reg_str, 'awz a1z'))# \s空白字符reg_str = r'a\sz'print(re.findall(reg_str, 'a z a1z'))# \S非空白字符reg_str = r'a\Sz'print(re.findall(reg_str, 'a z a1z'))# \w 单词字符[a-zA-Z0-9]reg_str = r'\w\d\w'print(re.findall(reg_str, 'hello a1b a b'))# \W 非单词字符reg_str = 'a\Wb'print(re.findall(reg_str, 'hello a1b a b a+b'))# {重复次数},限定前一个字符的重复次数reg_str = r'1[\d]{10}'print(re.findall(reg_str, '13412345678,qwertyui'))# {a,b}前一个字符出现重复次数的一个范围reg_str = r'[\d]{3,8}'print(re.findall(reg_str, '13412345678,12345,12,sdfgh'))# *匹配大于等于0次reg_str = r'1[\d]*'print(re.findall(reg_str, '13412345678,qwertyui 1'))reg_str = r'1[a]*'print(re.findall(reg_str, '13412345678,qwertyui 1aa 1 1a'))# +匹配大于等于1次reg_str = r'1[a]+'print(re.findall(reg_str, '13412345678,qwertyui 1aa 1 1a'))# ?匹配0或者1次reg_str = r'1[a]?'print(re.findall(reg_str, '13412345678,qwertyui 1aa 1 1a'))# 北京市电话号码tel_reg = r'^010-?[1-9]\d{7}$'print(re.findall(tel_reg, '010-82456356'))print(re.findall(tel_reg, '01054236987'))print(re.findall(tel_reg, '010-07894561'))print(re.findall(tel_reg, '01012345'))# 校验手机号mobile_phone = r'^1[3578][0-9][0-9]{8}'print(re.findall(mobile_phone, '13412345678'))print(re.findall(mobile_phone, '15098765432'))print(re.findall(mobile_phone, '17300000000'))print(re.findall(mobile_phone, '18736589741'))print(re.findall(mobile_phone, '10736589741'))# 练习：匹配邮箱email_reg = r'(\w+@\w+[\.\w+]+)'print(re.findall(email_reg, 'test@126.com test@qq.com test@sina.com.cn'))email_reg = r'(\w+@(\w+[\.\w+]+))'print(re.findall(email_reg, 'test@126.com test@qq.com test@sina.com.cn'))# ()分组r = r'(\.com\.cn).*(\.com).*(\.cn)'ret = re.search(r, 'test@126.com.cn test@126.com test@qq.cn')print(dir(ret))print(ret.groups())print(ret.group(0))print(ret.group(1))print(ret.group(2))print(ret.group(3))